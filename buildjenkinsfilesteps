pipeline {
    agent any

    tools {
        // Use Jenkins-managed Node.js installation (set name in "Manage Jenkins → Tools → NodeJS installations")
        nodejs "node18"
    }

    environment {
        // Define paths
        FRONTEND_DIR = 'frontend'
        BACKEND_DIR  = 'backend'
    }

    stages {

        stage('Checkout') {
            steps {
                echo 'Cloning GitHub repository...'
                git branch: 'main', url: 'https://github.com/your-username/your-repo.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing frontend dependencies...'
                dir("${FRONTEND_DIR}") {
                    bat 'npm install'
                }

                echo 'Installing backend dependencies...'
                dir("${BACKEND_DIR}") {
                    bat 'npm install'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                echo 'Building React app...'
                dir("${FRONTEND_DIR}") {
                    bat 'npm run build'
                }
            }
        }

        stage('Test Frontend') {
            steps {
                echo 'Running frontend tests...'
                dir("${FRONTEND_DIR}") {
                    bat 'npm test -- --ci --reporters=default --reporters=jest-junit'
                }
            }
            post {
                always {
                    junit "${FRONTEND_DIR}/reports/junit/*.xml"
                }
            }
        }

        stage('Test Backend') {
            steps {
                echo 'Running backend tests...'
                dir("${BACKEND_DIR}") {
                    bat 'npm test -- --reporters=default --reporters=jest-junit'
                }
            }
            post {
                always {
                    junit "${BACKEND_DIR}/reports/junit/*.xml"
                }
            }
        }

        stage('Deploy (Mock)') {
            steps {
                echo 'Simulating deployment...'
                bat 'echo Deploying to staging environment...'
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed. Please check the logs or test results.'
        }
    }
}
